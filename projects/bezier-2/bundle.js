(() => { "use strict"; var t = { 396: (t, i, e) => { Object.defineProperty(i, "__esModule", { value: !0 }), i.BezierAnim = void 0; const n = e(667), s = e(519); i.BezierAnim = class { constructor(t) { this.inMotion = !1, this.inManualMode = !1, this.motionPath = [], this.renderIntermediate = !0, this.time = 0, this.timeBind = () => { }, this.canvas = t, this.ctx = t.getContext("2d"), this.draggable = new n.Draggable(t), this.draggable.drawBg = this.drawBg.bind(this), this.draggable.draw() } drawBg() { this.ctx.fillStyle = "white", this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height), this.inMotion || this.inManualMode || (this.motionPath = this.getBezierPath(), this.drawAtTime(100, this.renderIntermediate)) } getBezierPath() { const t = this.draggable.points, i = []; if (t.length <= 1) return i; for (let e = 0; e <= 100; e += 1) { const n = (0, s.bezier)(t, e), o = n[n.length - 1][0]; i.push(o) } return i } drawMotionPath(t = 100) { if (this.motionPath.length <= 1) return; this.ctx.beginPath(), this.ctx.moveTo(this.motionPath[0][0], this.motionPath[0][1]); const i = Math.min(this.motionPath.length, t); for (let t = 1; t < i; t++) { const [i, e] = this.motionPath[t]; this.ctx.lineTo(i, e) } this.ctx.strokeStyle = "red", this.ctx.lineWidth = 2, this.ctx.stroke(), this.ctx.lineWidth = 1 } drawAtTime(t, i = !0) { if (!(this.motionPath.length <= 1)) { if (i) { const i = (0, s.bezier)(this.draggable.points, t); for (let t = 0; t < i.length - 1; t++) { const e = i[t]; this.ctx.beginPath(), this.ctx.moveTo(e[0][0], e[0][1]); for (let t = 1; t < e.length; t++) { const [i, n] = e[t]; this.ctx.lineTo(i, n) } this.ctx.strokeStyle = "blue", this.ctx.stroke() } } this.drawMotionPath(t) } } motionTick() { this.inMotion && (this.time += 1, this.time > 100 && (this.time = 0), this.draggable.draw(), this.drawAtTime(this.time, this.renderIntermediate), this.timeBind(this.time), setTimeout((() => requestAnimationFrame(this.motionTick.bind(this))), 30)) } bindAnimationUpdate(t) { this.timeBind = t } startMotionHandler() { this.inMotion || this.draggable.points.length <= 1 || (this.inMotion = !0, this.time = 0, this.draggable.disable(), this.motionTick(), this.canvas.addEventListener("mousedown", this.stopMotionHandler.bind(this))) } stopMotionHandler() { this.inMotion && (this.inMotion = !1, this.draggable.enable(), this.time = 0, this.timeBind(0), this.canvas.removeEventListener("mousedown", this.stopMotionHandler.bind(this))) } overrideTimeHandler(t) { this.inMotion && this.stopMotionHandler(), this.inManualMode = !0, this.time = t, this.draggable.draw(), this.drawAtTime(this.time, this.renderIntermediate), this.inManualMode = !1 } addPointHandler() { this.inMotion && this.stopMotionHandler(), this.draggable.addPoint(250, 250), this.draggable.draw() } removePointHandler() { this.inMotion && this.stopMotionHandler(), this.draggable.removePoint(), this.draggable.draw() } showIntermediateHandler() { this.renderIntermediate = !0, this.draggable.draw() } hideIntermediateHandler() { this.renderIntermediate = !1, this.draggable.draw() } resetHandler() { this.inMotion = !1, this.inManualMode = !1, this.time = 0, this.timeBind(0), this.draggable.removeAllPoints(), this.draggable.draw(), this.draggable.enable() } setDemoPoints() { this.draggable.addPoint(100, 100), this.draggable.addPoint(400, 100), this.draggable.addPoint(100, 400), this.draggable.addPoint(400, 400), this.draggable.draw() } } }, 667: (t, i) => { Object.defineProperty(i, "__esModule", { value: !0 }), i.Draggable = void 0, i.Draggable = class { constructor(t) { this.dragPoints = [], this.nextPointId = 0, this.pickup = !1, this.pickupPoint = null, this.mouseDownHandler = t => { const i = t.offsetX, e = t.offsetY, n = this.dragPoints.filter((t => { const n = t.x - i, s = t.y - e, o = t.size + 5; return n * n + s * s <= o * o })); if (0 === n.length) return; const s = n.reduce(((t, i) => t.priority > i.priority ? t : i)); s && (this.pickupPoint = s, this.pickup = !0) }, this.mouseUpHandler = t => { this.pickup = !1, this.pickupPoint = null }, this.mouseMoveHandler = t => { if (this.pickup) { const i = t.offsetX, e = t.offsetY; this.pickupPoint.x = i, this.pickupPoint.y = e, this.draw() } }, this.canvas = t, this.ctx = t.getContext("2d"), this.attachListeners() } drawBg() { } attachListeners() { this.canvas.addEventListener("mousedown", this.mouseDownHandler), this.canvas.addEventListener("mouseup", this.mouseUpHandler), this.canvas.addEventListener("mousemove", this.mouseMoveHandler) } removeListeners() { this.canvas.removeEventListener("mousedown", this.mouseDownHandler), this.canvas.removeEventListener("mouseup", this.mouseUpHandler), this.canvas.removeEventListener("mousemove", this.mouseMoveHandler) } drawPoint(t) { this.ctx.beginPath(), this.ctx.arc(t.x, t.y, t.size, 0, 2 * Math.PI), this.ctx.fillStyle = t.color, this.ctx.fill(), this.ctx.closePath(), this.ctx.fillStyle = "black", this.ctx.fillText(t.label, t.x + 5, t.y - t.size - 5) } draw() { this.drawBg(), this.dragPoints.forEach((t => this.drawPoint(t))) } set drawCallback(t) { this.drawBg = t } enable() { this.attachListeners() } disable() { this.removeListeners() } addPoint(t, i, e = 7, n = "", s = "black") { const o = this.nextPointId++; "" === n && (n = o.toString()), this.dragPoints.push({ x: t, y: i, size: e, label: n, color: s, priority: o, isDragging: !1 }) } removePoint() { this.dragPoints.pop() } removeAllPoints() { this.dragPoints = [], this.nextPointId = 0 } get points() { return this.dragPoints.map((t => [t.x, t.y])) } } }, 519: (t, i) => { Object.defineProperty(i, "__esModule", { value: !0 }), i.bezier = void 0, i.bezier = function (t, i) { if (i < 0 || i > 100) throw new Error("t must be in [0,100]"); i /= 100; const e = [t]; for (let n = 0; n < t.length - 1; n++) { const t = e[n]; if (1 === t.length) break; const s = []; for (let e = 0; e < t.length - 1; e++) { const [n, o] = t[e], [a, r] = t[e + 1], h = n + (a - n) * i, d = o + (r - o) * i; s.push([h, d]) } e.push(s) } return e } } }, i = {}; function e(n) { var s = i[n]; if (void 0 !== s) return s.exports; var o = i[n] = { exports: {} }; return t[n](o, o.exports, e), o.exports } (() => { const t = e(396); var i; i = () => { const i = document.getElementById("canvas"); i.width = 500, i.height = 500; const e = new t.BezierAnim(i), n = [["add-point-btn", "click", e.addPointHandler], ["remove-point-btn", "click", e.removePointHandler], ["start-btn", "click", e.startMotionHandler], ["stop-btn", "click", e.stopMotionHandler], ["reset-btn", "click", e.resetHandler]]; for (const [t, i, s] of n) document.getElementById(t).addEventListener(i, s.bind(e)); const s = document.getElementById("time-control"); s.addEventListener("input", (() => { e.overrideTimeHandler(parseInt(s.value)) })), e.bindAnimationUpdate((t => { s.value = t.toString() })); const o = document.getElementById("show-inter"); o.addEventListener("change", (() => { o.checked ? e.showIntermediateHandler() : e.hideIntermediateHandler() })), e.setDemoPoints() }, "loading" !== document.readyState ? i() : document.addEventListener("DOMContentLoaded", i) })() })();